FASTLANE_DIRECTORY = File.dirname(__FILE__)
$LOAD_PATH.unshift(FASTLANE_DIRECTORY + '/lib')
require 'vams'

update_fastlane
fastlane_version "1.36.0"
default_platform :ios

def apply_config(build_name:, environment:)
  sh "cd ../../ && ./build-scripts/apply-config.sh #{build_name} -e #{environment}"
end

def prepare_metadata(client:, build_name:)
  app_with_meta = client.app_by_build_name(build_name)
  metadata      = VAMS::Metadata.new(app_with_meta)
  metadata_path = File.join(FASTLANE_DIRECTORY, 'metadata')
  metadata.save(location: metadata_path, language: 'en-US')
  app_with_meta
end

def with_bundle_id(bundle_id:)
  old_bundle_id = ENV['BUNDLE_ID']
  ENV['BUNDLE_ID'] = bundle_id
  yield
  ENV['BUNDLE_ID'] = old_bundle_id
end

def clean_build_products
  clean_build_artifacts
  `git checkout #{FASTLANE_DIRECTORY}/../AppSpecific`
  `git checkout #{FASTLANE_DIRECTORY}/../fastlane/metadata/`
end

def make_build_string(version:, build_number:)
  "#{version} (#{build_number})"
end

def send_submission_result(app_id:, client:, build:, status:)
  result = VAMS::SubmissionResult.new(
    app_id:   app_id,
    datetime: Time.now,
    build:    build,
    status:   status
  )
  client.submit_result(result: result)
end

platform :ios do
  desc "Deploy a new version to the App Store"
  lane :deploy do |options|
    ensure_git_status_clean unless ENV['IGNORE_DIRTY_GIT_STATE']
    environment = options[:environment] || :production
    client      = VAMS::Client.new(environment: environment)
    client.apps_to_build.each do |app|
      clean_build_products

      logger       = VAMS::ColoredLogger.new($stdout)
      version      = ''
      build_number = ''

      begin
        apply_config(build_name: app.build_name, environment: environment)
        app_with_meta = prepare_metadata(client: client, build_name: app.build_name)

        with_bundle_id(bundle_id: app_with_meta.sanitized_bundle_id) do
          sigh

          gym(
            scheme:               'release-victorious',
            codesigning_identity: 'iPhone Distribution: Victorious Inc. (82T26U698A)',
          )
          version      = get_version_number(xcodeproj: 'victorious.xcodeproj')
          build_number = get_build_number(xcodeproj:   'victorious.xcodeproj')

          ENV['FASTLANE_ITC_TEAM_ID']   = ENV['FASTLANE_TEAM_ID']
          ENV['FASTLANE_ITC_TEAM_NAME'] = ENV['FASTLANE_TEAM_NAME']

          deliver(force: true)

          status = VAMS::SubmissionResult::Status::GOOD
          send_submission_result(app_id: app.app_id,
                                 client: client,
                                 build:  make_build_string(version:      version,
                                                           build_number: build_number),
                                 status: status)
          logger.info("Notified VAMS with status: #{status}")
        end

      rescue Exception => exception
        status = VAMS::SubmissionResult::Status::BAD
        logger.error(exception.message)
        logger.error(exception.backtrace.join("\n"))
        send_submission_result(app_id: app.app_id,
                               client: client,
                               build:  make_build_string(version:      version,
                                                         build_number: build_number),
                               status: status)
        logger.error("Notified VAMS with status: #{status}")
      ensure
        clean_build_products
      end
    end
  end
end
